/*
*   Calculates burn severity from prefire to postfire and 
*   exports vectorized burn severity area per NBR classification.
*/

//------------------------------ User Fire Information ------------------------------
// parameters before fire
var prefire_start = '2018-01-04';
var prefire_end = '2018-07-27';

// parameters after fire
var postfire_start = '2019-01-04';
var postfire_end = '2019-05-04';

//------------------------------ Satellite Selection ------------------------------
var satellite = 'Landsat_8';  //Choose between 'Landsat 8' and 'MODIS'

// User Inputs Selection
if (satellite == 'Landsat_8') {
  var collect = 'LANDSAT/LC08/C01/T1_SR';
  var sat = 'Landsat 8';
} else {
  var collect = 'MODIS/006/MOD09GA';
  var sat = 'MODIS';
}
print(ee.String('Data selected for analysis: ').cat(sat));
print(ee.String('Fire incident occurred between ').cat(prefire_end).cat(' and ').cat(postfire_start));

// Location (uploaded through assets)
var area = ee.FeatureCollection(geometry);
var geometry2 = ee.FeatureCollection(geometry);

// Set study area as map center.
Map.centerObject(area);

//----------------------- Select Landsat imagery collection -----------------------
var imagery = ee.ImageCollection(collect);

// take the image, filter by date, filter by location, and filter by cloud cover
// Pre-Fire
var prefireCollect = ee.ImageCollection(imagery
    // Filter by dates.
    .filterDate(prefire_start, prefire_end)
    // Filter by location.
    .filterBounds(point)
    // Filter Cloud Cover
    .sort('CLOUD_COVER').first()); 

// Post-Fire
var postfireCollect = ee.ImageCollection(imagery
     // Filter by dates.
    .filterDate(postfire_start, postfire_end)
    // Filter by location.
    .filterBounds(point)
    // Filter Cloud Cover
    .sort('CLOUD_COVER').first());

// Add image information to the Console
print("Pre-fire Image Collection: ", prefireCollect); 
print("Post-fire Image Collection: ", postfireCollect);

//----------------------- Mask Snow/Cloud -----------------------
function  maskL8sr(image) {
  // Bits 3 and 5 are cloud shadow and cloud, respectively.
  var cloudShadowBitMask = 1 << 3;
  var cloudsBitMask = 1 << 5;
  var snowBitMask = 1 << 4;
  // Get the pixel QA band.
  var qa = image.select('pixel_qa');
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
      .and(qa.bitwiseAnd(cloudsBitMask).eq(0))
      .and(qa.bitwiseAnd(snowBitMask).eq(0));
  return image.updateMask(mask)
  .select("B[0-9]*")
  .copyProperties(image, ["system:time_start"]);
}

if (satellite == "Landsat_8") {
  var prefireCollect_snowmask = prefireCollect.map(maskL8sr);
  var postfireCollect_snowmask = postfireCollect.map(maskL8sr);
} else {
  var prefireCollect_snowmask = prefireCollect.map(maskL8sr);
  var postfireCollect_snowmask = postfireCollect.map(maskL8sr);
}

//----------------------- Clipping Image -----------------------
var pre_clip = prefireCollect.mosaic().clip(area);
var post_clip = postfireCollect.mosaic().clip(area);

var pre_mask_clip = prefireCollect_snowmask.mosaic().clip(area);
var post_mask_clip = postfireCollect_snowmask.mosaic().clip(area);

//----------------------- NBR Calculation -----------------------
if (satellite == 'Landsat_8'){
  var prefire_NBR = pre_mask_clip.normalizedDifference(['B5', 'B7']);
  var postfire_NBR = post_mask_clip.normalizedDifference(['B5', 'B7']);
} else {
  var prefire_NBR = pre_mask_clip.normalizedDifference(['sur_refl_b02', 'sur_refl_b07']);
  var postfire_NBR = post_mask_clip.normalizedDifference(['sur_refl_b02', 'sur_refl_b07']);
}

//----------------------- NBR Difference -----------------------
var dNBR_unscaled = prefire_NBR.subtract(postfire_NBR);

var dNBR = dNBR_unscaled.multiply(1000);

print("Difference Normalized Burn Ratio: ", dNBR);

//----------------------- Displaying Wildfire Perimeter -----------------------
Map.addLayer(area.draw({color:'ffffff', strokeWidth: 5}), {}, 'Study Area');

//----------------------- Displaying True Color -----------------------
if (satellite == 'Landsat_8'){
  var vis = {
  bands: ['B4','B3','B2'],
  min: 0,
  max: 4000,
  gamma:1.5};
} else {
  var vis = {
  bands: ['sur_refl_b01','sur_refl_b04','sur_refl_b03'],
  min: -0,
  max: 4000,
  gamma:1.5};
}

// Applying true color images to map
Map.addLayer(pre_clip, vis, 'Prefire');
Map.addLayer(post_clip, vis, 'Postfire');

// Applying cloud mask true color
//Map.addLayer(pre_mask_clip, vis, 'Prefire Clouds Masked');
//Map.addLayer(post_mask_clip, vis, 'Postfire Clouds Masked');

//----------------------- Burn Ratio Greyscale -----------------------
var grey = ['white', 'black'];

// Layers are commented out to save uploading time

//Map.addLayer(prefire_NBR, {min:-1, max: 1, palette:grey}, 'Prefire NBR');
//Map.addLayer(postfire_NBR, {min:-1, max: 1, palette:grey}, 'Postfire NBR');

//Map.addLayer(dNBR, {min: -1000, max: 1000, palette: grey}, 'dNBR greyscale');

//----------------------- NBR Classification / Color Ramp -----------------------
var sld_intervals =
  '<RasterSymbolizer>' +
    '<ColorMap type="intervals" extended="false" >' +
      '<ColorMapEntry color="#ffffff" quantity="-500" label="-500"/>' +
      '<ColorMapEntry color="#7a8737" quantity="-250" label="-250" />' +
      '<ColorMapEntry color="#acbe4d" quantity="-100" label="-100" />' +
      '<ColorMapEntry color="#0ae042" quantity="100" label="100" />' +
      '<ColorMapEntry color="#fff70b" quantity="270" label="270" />' +
      '<ColorMapEntry color="#ffaf38" quantity="440" label="440" />' +
      '<ColorMapEntry color="#ff641b" quantity="660" label="660" />' +
      '<ColorMapEntry color="#a41fd6" quantity="2000" label="2000" />' +
    '</ColorMap>' +
  '</RasterSymbolizer>';
  
// Adding image with color ramp
Map.addLayer(dNBR.sldStyle(sld_intervals),{}, 'dNBR Color Ramp');

// Burn severity separation
var thresholds = ee.Image([-1000, -251, -101, 99, 269, 439, 659, 2000]);
var classified = dNBR.lt(thresholds).reduce('sum').toInt();

//----------------------- Burn Area Statistics -----------------------

// count number of pixels in entire layer
var allpix =  classified.updateMask(classified);  // mask the entire layer
var pixstats = allpix.reduceRegion({
  reducer: ee.Reducer.count(),                    // count pixels in a single class
  geometry: area,
  scale: 30
  });
var allpixels = ee.Number(pixstats.get('sum'));   // extract pixel count as a number


// create an empty list to store area values in
var arealist = [];

// create a function to derive extent of one burn severity class
// arguments are class number and class name
var areacount = function(cnr, name) {
 var singleMask =  classified.updateMask(classified.eq(cnr));   // mask a single class
 var stats = singleMask.reduceRegion({
  reducer: ee.Reducer.count(),                                  // count pixels in a single class
  geometry: area,
  scale: 30
  });
var pix =  ee.Number(stats.get('sum'));
var hect = pix.multiply(900).divide(10000);                     // Landsat pixel = 30m x 30m --> 900 sqm
var perc = pix.divide(allpixels).multiply(10000).round().divide(100);   // get area percent by class and round to 2 decimals
arealist.push({Class: name, Pixels: pix, Hectares: hect, Percentage: perc});
};

// severity classes in different order
var names2 = ['NA', 'High Severity', 'Moderate-high Severity',
'Moderate-low Severity', 'Low Severity','Unburned', 'Low Regrowth', 'High Regrowth'];

// execute function for each class
for (var i = 0; i < 8; i++) {
  areacount(i, names2[i]);
  }

print('Burned Area by Severity Class', arealist, '--> click list objects for individual classes');

// [DEBUG] Testing Vectorization
var ths = [-251, -101, 99, 269, 439, 659, 2000];
// var zones = dNBR.lt(-1000).add(dNBR.lt(-251)).add(dNBR.lt(-101)).add(dNBR.lt(99)).add(dNBR.lt(269)).add(dNBR.lt(439)).add(dNBR.lt(659)).add(dNBR.lt(2000));
var zones = dNBR.lt(-1000);
for (var i in ths) {
  zones = zones.add(dNBR.lt(ths[i]));
}
zones = zones.updateMask(zones.neq(0));
print("Zones: ", zones);

var vecs = zones.addBands(dNBR).reduceToVectors({
  geometry: geometry2,
  scale: 30,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'zone',
  reducer: ee.Reducer.mean(),
  maxPixels: 20e9
});

Export.table.toDrive({
  collection: vecs,
  description: 'vectorsToDrive',
  fileFormat: 'CSV'
});

//----------------------- Legend -----------------------

// set position of panel
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }});
 
// Create legend title
var legendTitle = ui.Label({
  value: 'Î”NBR Classes',
  style: {fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }});
 
// Add the title to the panel
legend.add(legendTitle);
 
// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
 
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }});
 
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      })};
 
//  Palette with the colors
var palette =['7a8737', 'acbe4d', '0ae042', 'fff70b', 'ffaf38', 'ff641b', 'a41fd6', 'ffffff'];
 
// name of the legend
var names = ['High Regrowth','Low Regrowth','Unburned', 'Low Severity',
'Moderate-low Severity', 'Moderate-high Severity', 'High Severity', 'NA'];
 
// Add color and and names
for (var i = 0; i < 8; i++) {
  legend.add(makeRow(palette[i], names[i]));
  }  
 
// add legend to map (alternatively you can also print the legend to the console)
Map.add(legend);